import { ChangeEvent, DragEvent } from "react";
import { UseFormReset, UseFormTrigger } from "react-hook-form";
import { ImageService } from "@/entities/image/model/ImageService";
import { descriptionVar, imageVar, previewVar, titleVar } from "@/app/apollo/client";
import { useApolloClient, useMutation } from "@apollo/client";
import { CREATE_POST } from "@/features/posts/api/mutations/createPost.ts";
import PostUtils from "@/features/posts/model/utils/PostUtils.ts";

interface FormData {
    title: string;
    description: string;
    image: File | null;
}

interface UsePostHandlersParams {
    reset: UseFormReset<FormData>;
    trigger: UseFormTrigger<FormData>;
}

export const usePostHandlers = ({ reset, trigger }: UsePostHandlersParams) => {
    const client = useApolloClient(); // –î–æ—Å—Ç—É–ø –∫ Apollo Cache
    const [createPostMutation] = useMutation(CREATE_POST);

    const handleDrop = (event: DragEvent<HTMLDivElement>) => {
        ImageService.handleDrop(event, async (file) => {
            imageVar(file);
            ImageService.generatePreview(file, (preview) => previewVar(preview));

            try {
                const isValid = await trigger("image");
                if (!isValid) console.error("–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞.");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ trigger:", error);
            }
        });
    };

    const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
        ImageService.handleFileChange(event, (file) => {
            if (!file) {
                console.error("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.");
                return;
            }
            imageVar(file);
            previewVar(URL.createObjectURL(file));
        });
    };

    const handleCancel = () => {
        reset({ title: "", description: "", image: null });
        imageVar(null);
        previewVar(null);
        titleVar("");
        descriptionVar("");
    };

    const onSubmit = async () => {
        try {
            if (!imageVar()) {
                console.error("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
                return;
            }

            if (descriptionVar().length < 40) {
                console.error("–û—à–∏–±–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤.");
                return;
            }

            console.log("üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", imageVar()?.name);

            const mediaUrl = await PostUtils.uploadImageAndGetUrl(imageVar()!);
            if (!mediaUrl) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—É—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            const { data } = await createPostMutation({
                variables: {
                    input: {
                        title: titleVar(),
                        description: descriptionVar(),
                        mediaUrl,
                    },
                },
            });

            if (!data?.postCreate) {
                console.error("–û—à–∏–±–∫–∞: –ü–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.");
                return;
            }

            const newPost = data.postCreate;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à Apollo –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            client.cache.modify({
                fields: {
                    posts(existingPosts = []) { // –ï—Å–ª–∏ undefined, –∑–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
                        if (!Array.isArray(existingPosts)) {
                            return [newPost]; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º
                        }
                        return [newPost, ...existingPosts]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                    },
                },
            });
            handleCancel();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:", error);
        }
    };

    return { handleDrop, handleFileChange, handleCancel, onSubmit };
};

export default usePostHandlers;
